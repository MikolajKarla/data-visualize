version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
    container_name: backend_dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__  # Exclude cache directory
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHON_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
    container_name: frontend_dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Exclude node_modules to avoid conflicts
      - /app/.next        # Exclude .next cache
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true  # For better file watching on Windows
      - WATCHPACK_POLLING=true
    depends_on:
      - backend
    restart: unless-stopped
    command: ["npm", "run", "dev"]
    stdin_open: true
    tty: true

  db:
    image: postgres:17-alpine
    container_name: data_visualize_db_dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - dataVisualize_db_dev_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro  # Optional init script
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: pgAdmin for database management in development
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    restart: unless-stopped
    profiles: ["tools"]  # Use with: docker-compose --profile tools up

volumes:
  dataVisualize_db_dev_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: data-visualize-dev
    driver: bridge